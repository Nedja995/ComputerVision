:::::::::::::::::::::::::::::::::::
:: 
::		WORK IN PROGRESS
::
:::::::::::::::::::::::::::::::::::


== README ==
 1.) Project summary
 2.) Using
 3.) Technical summary
 4.) Prerequisites
 5.) Building
 6.) Installing
 7.) Contributing
 
== 1. PROJECT SUMMARY ==

	* This is a lightweight computer vision library I started with the aim of personal training.
	  It is cross platform and open source 

	* In addition to computer vision and even more I want learn to apply techniques related to open source projects 
	  as other interesting software engineering techniques and technologies.
	  
	* All advice and criticisms are welcome

== 2. USING ==

	* End user:
		can start gui program from /bin/ directory for their envrinoment
	
	* Library users:
		need to link libs from /lib/ directory and include headers from /include/ directory
	  
	* Developer:
		can use CMake to generate project for various IDE-s and Makefile 
		I use Visual Studio 2015 and Codeblock for Linux.
		When configuring CMake you can configure third part libs:
			GTest
			Detailed trace
			Visual Leak Detector
			Examples
	
== 3. TECHNICAL SUMMARY ==

	* Base is maden by several c modules and they are full cross platform libs 
	  with posibility to port them on embeded system.
	  There is the functions for memory allocation, strings compare, list, etc..
	  very configurable logging system and base datatypes like pixel, image 
	  and main image processing functions like, edge detection, classification,...
  
    * The Base is separated into four part for now it contains:
		1.) 'core' module which is something like standard library
		2.) 'utils' file/image read and write
		3.) 'imgproc' image processing
		4.) 'classification'
		
	* Second part which is not yet implemented 
  __________________________________________
  | H |
  | E | CMake
  | L | 
  | P | GTest
  | E |
  | R | Examples project
  |_S_|____________________________________
  |   | C | 						       |
  |   | O | memory, string, list, math,    |
  | B | R | time, io, datatypes            |  
  | A | E | 							   |
  | S |___|________________________________|
  | E | U |                                |
  |   | T | file and image read/write      |
  |   | I | 							   |
  |   | L | path utils					   |
  |   | S |								   |
  |   |___|________________________________|
  |   | I |								   |
  |   | M | canny/custom edge detection    |
  |   | G |								   |
  |   | P | image gray                     |
  |   | R |								   |
  |   | O |								   |
  |   | C |								   |
  |   |___|________________________________|
  |   | C |								   |
  |   | L | classification data utils      |
  |   | A |								   |
  |   | S | classification methods         |
  |   | I |								   |
  |   | F |								   |
  |   | F |								   |
  |   | Y |								   |
  |___|___|________________________________|
  
  __________________________________________
  |			IN PROGRESS:				   |		
  |________________________________________|
  |   | G | 						       |
  | M | U | Win32 api			           |
  | A | I |  linux gui                     |   
  | I |___|________________________________|
  | N | B |		 |   					   |
  |   | I | java | cross plat. build & GUI => external
  | C | N |______|_________________________|
  | + | D | 		|				       |
  | + | I |	python	|	//scripting	gui	   |
  | A | N |_________|______________________|
  | P | G |		|						   |
  | I | S |	C#	| Unity3D API			   => external
  |___|___|_____|__________________________|

  __________________________________________
  |											|
  |   MACHINE LEARNING LATER...        		|
  |_________________________________________|
  
== 3. PREREQUISITES ==

 This project requires:
  * Cross-platform Make (CMake) v2.6.2+
  * GNU Make or equivalent.
  * GCC or an alternative, reasonably conformant C++ compiler.
  * Boost C++ Libraries v1.37+ [HEADERS and LIBRARIES]
  * Qt Framework v4.5+
  * Log4Cxx v0.10.0+
  * UnitTest++ (a.k.a. unittest-cpp)

== 4. BUILDING ==

 	1.) Windows/Visual Studio:
			(NOTE) Before starting 'tests' project in VS 
			 make sure it Runtime Library is Multi-threaded Debug (/MTd)

	2.) Linux/Codeblock/Unix Makefile:
	
	
	
 This project uses the Cross-platform Make (CMake) build system. However, we
 have conveniently provided a wrapper configure script and Makefile so that
 the typical build invocation of "./configure" followed by "make" will work.
 For a list of all possible build targets, use the command "make help".

 NOTE: Users of CMake may believe that the top-level Makefile has been
 generated by CMake; it hasn't, so please do not delete that file.

== 5. INSTALLING ==

 Once the project has been built (see "BUILDING"), execute "sudo make install".

== 6. CONTRIBUTING ==

 TODO: Enhance section.
