:::::::::::::::::::::::::::::::::::
:: 
::		WORK IN PROGRESS
::
:::::::::::::::::::::::::::::::::::


== README ==
 1.) Project summary
 2.) Using
 3.) Technical summary
 4.) Prerequisites
 5.) Building
 6.) Installing
 7.) Contributing
 
== 1. PROJECT SUMMARY ==

	* This is a lightweight computer vision library I started with the aim of personal training.
	  It is cross platform compiling and open source project for Windows, Linux and Android
	  with posibility to port them on other platform and even embeded system.	

	* There is not clear targets for what this can be used.
	  For now it can be used like:
		1.) standard libray (strings, lists, memory, and etc..) with configurable log system
		2.) utils that can read/write file and images and cross platform path string utilities
		3.) some image filtering and processing like gray, edge detection canny, cuting images
		4.) classify images based on edges

	* In addition to computer vision and even more I want learn to apply techniques related to open source projects 
	  as other interesting software engineering techniques and technologies.
	  I'm not going to make alternatives for existing solution 
	  but there is some equals with somes solution I get inspired like opencv, blender, Vuforia, Neuroph, TensorFlow
	  
	* All advice, criticisms, questions and participants are welcome

== 2. USING ==

	* End user:
		can start gui program from '/bin/' directory for their envrinoment (in progress HIGH PRIORITY)
	
	* Library users:
		need to link libs from '/lib/' directory and include headers from '/include/ directory'
	  
	* Developer:
		can use CMake to generate project for various IDE-s and Makefile 
		I use Visual Studio 2015 and Codeblock for Linux.
		For library development there is two usefull executable:
			1.) examples - when running they will use make few outputs in '/examples/datas/output'
						 - also this directory you can find '/valid_results/' with who you can compare your outputs
						 - althrought in '/examples/datas/output/old/classified/test1/' 
							you can find classification output of ocr number samples in early stage of development
							
			2.) tests - Thanksfully GTests there is great system for testing this project
					  - Dependency will be automaticaly download via CMake 
		
		When configuring CMake you can configure third part libs:
			GTest
			Detailed trace
			Visual Leak Detector
			Examples
	
== 3. TECHNICAL SUMMARY ==

	* Base is made by several c modules and they are full cross platform libs 
	  There is the:
	  1.) functions for memory allocation, strings compare, list, etc..
	  2.) very configurable logging system 
	  4.) base datatypes like pixel, image 
	  3.) main image processing functions like, edge detection, classification,...
  
    * The Base is separated into four part for now it contains:
		1.) 'core' module which is something like standard library
		2.) 'utils' file/image read and write
		3.) 'imgproc' image processing
		4.) 'classification'
		
	* Second part is not yet implemented 
  __________________________________________
  | H |
  | E | CMake
  | L | 
  | P | GTest
  | E |
  | R | Examples project
  |_S_|____________________________________
  |   | C | 						       |
  |   | O | memory, string, list, math,    |
  | B | R | time, io, datatypes            |  
  | A | E | 							   |
  | S |___|________________________________|
  | E | U |                                |
  |   | T | file and image read/write      |
  |   | I | 							   |
  |   | L | path utils					   |
  |   | S |								   |
  |   |___|________________________________|
  |   | I |								   |
  |   | M | canny/custom edge detection    |
  |   | G |								   |
  |   | P | image gray                     |
  |   | R |								   |
  |   | O |								   |
  |   | C |								   |
  |   |___|________________________________|
  |   | C |								   |
  |   | L | classification data utils      |
  |   | A |								   |
  |   | S | classification methods         |
  |   | I |								   |
  |   | F |								   |
  |   | F |								   |
  |   | Y |								   |
  |___|___|________________________________|
  
	
  in progress:
   _________________________________________
  |   | G | 						       |
  | M | U | Win32 api			           |
  | A | I |  linux gui                     |   
  | I |___|________________________________|
  | N | B |		 |   					   |
  |   | I | java | cross plat. build & GUI => external
  | C | N |______|_________________________|
  | + | D | 		|				       |
  | + | I |	python	|	//scripting	gui	   |
  | A | N |_________|______________________|
  | P | G |		|						   |
  | I | S |	C#	| Unity3D API			   => external
  |___|___|_____|__________________________|

  __________________________________________
  |											|
  |   MACHINE LEARNING LATER...        		|
  |_________________________________________|
  
== 4. PREREQUISITES ==

 This project requires:
  * Cross-platform Make (CMake) v2.6.2+
  * (Windows) Visual Studio 2010+
  * (linux) GCC or an alternative, reasonably conformant C++ compiler.
  * (linux optional) CodeBlock IDE

== 5. BUILDING ==

 	1.) Windows/Visual Studio

	2.) Linux/Codeblock/Unix Makefile
	
 This project uses the Cross-platform Make (CMake) build system. However, we
 have conveniently provided a wrapper configure script and Makefile so that
 the typical build invocation of "./configure" followed by "make" will work.
 For a list of all possible build targets, use the command "make help".

 NOTE: Users of CMake may believe that the top-level Makefile has been
 generated by CMake; it hasn't, so please do not delete that file.

== 6. INSTALLING ==

 Once the project has been built (see "BUILDING"), execute "sudo make install".

== 6. CONTRIBUTING ==

 TODO: Enhance section.
